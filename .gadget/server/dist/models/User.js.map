{
  "version": 3,
  "sources": ["../../src/models/User.ts"],
  "sourcesContent": ["// All the generated types for the \"User\" model preconditions, actions, params, etc\nimport { AmbientContext } from \"../AmbientContext\";\nimport { ActionExecutionScope, NotYetTyped, ValidationErrors, ActionTrigger } from \"../types\";\nimport { GadgetRecord, User } from \"@gadget-client/kaghati-shopify-v3\";\nimport { Select } from \"@gadgetinc/api-client-core\";\nexport type DefaultUserServerSelection = {\n  readonly __typename: true;\n      readonly id: true;\n      readonly createdAt: true;\n      readonly updatedAt: true;\n      readonly googleProfileId: true;\n      readonly googleImageUrl: true;\n      readonly password: true;\n      readonly firstName: true;\n      readonly lastSignedIn: true;\n      readonly emailVerified: true;\n      readonly resetPasswordTokenExpiration: true;\n      readonly lastName: true;\n      readonly roles: true;\n      readonly emailVerificationToken: true;\n      readonly resetPasswordToken: true;\n      readonly emailVerificationTokenExpiration: true;\n      readonly email: true;\n      readonly shopId: true;\n    readonly shop: false;\n  };\n\n  \n/** All the data passed to an effect or precondition within the `update` action on the `user` model. */\nexport interface UpdateUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: UpdateUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `delete` action on the `user` model. */\nexport interface DeleteUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: DeleteUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `signUp` action on the `user` model. */\nexport interface SignUpUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: SignUpUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `signIn` action on the `user` model. */\nexport interface SignInUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: SignInUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `signOut` action on the `user` model. */\nexport interface SignOutUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: SignOutUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `sendVerifyEmail` action on the `user` model. */\nexport interface SendVerifyEmailUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: SendVerifyEmailUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `sendResetPassword` action on the `user` model. */\nexport interface SendResetPasswordUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: SendResetPasswordUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `verifyEmail` action on the `user` model. */\nexport interface VerifyEmailUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: VerifyEmailUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `resetPassword` action on the `user` model. */\nexport interface ResetPasswordUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: ResetPasswordUserActionContext;\n};\n\n\n    \n/** All the data passed to an effect or precondition within the `changePassword` action on the `user` model. */\nexport interface ChangePasswordUserActionContext extends AmbientContext {\n  /**\n  * The model of the record this action is operating on\n  */\n  model: NotYetTyped;\n  /**\n  * The `user` record this action is operating on.\n  */\n  record: GadgetRecord<Select<User, DefaultUserServerSelection>>;\n  /**\n  * An object passed between all preconditions and effects of an action execution at the `scope` property.\n  * Useful for transferring data between effects.\n  */\n  scope: ActionExecutionScope;\n  /**\n  * An object describing what started this action execution.\n  */\n  trigger: ActionTrigger;\n  /**\n  * An object containing all the incoming params that have been defined for this action. Includes params added by any triggers, as well as custom params defined in the action.\n  */\n  params: {\n\n};\n  /**\n  * The context of this action. This context does not have a defined inner context.\n  */\n  context: ChangePasswordUserActionContext;\n};\n\n\n  "],
  "mappings": "AAyDC;AAiCA;AAiCA;AAiCA;AAiCA;AAiCA;AAiCA;AAiCA;AAiCA;AAiCA;",
  "names": []
}
