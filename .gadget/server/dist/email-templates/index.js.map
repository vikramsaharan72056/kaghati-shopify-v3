{
  "version": 3,
  "sources": ["../../src/email-templates/index.ts"],
  "sourcesContent": ["import { Globals } from \"../globals\";\nimport { RESET_PASSWORD_TEMPLATE } from \"./reset-password\";\nimport { VERIFY_EMAIL_TEMPLATE } from \"./verify-email\";\nimport { Config } from \"../AppConfigs\";\nimport { emails } from \"../emails\";\nimport { GlobalNotSetError } from \"../errors\";\n\ninterface templateData {\n  app_name?: string;\n  url: string;\n}\n\n/**\n * Renders an email template using EJS.\n * @param {string} template - The EJS template content\n * @param {object} data - The data to be passed to the template\n * @returns {string} - The rendered email template\n */\nexport const renderEmailTemplate = (template: string, data: Record<string, any>) => {\n  if (!emails) {\n    throw new GlobalNotSetError(\"emails is not yet defined\");\n  }\n\n  try {\n    return emails.render(template, data);\n  } catch (error) {\n    Globals.logger.error({ error, name: \"emails\" }, \"An error occurred rendering your EJS email template\");\n    throw error;\n  }\n};\n\n/**\n * Renders the \"Verify Email\" template.\n * * @param {templateData} data - The data used to render the template.\n * @param {string} [data.app_name] - The name of your app, defaults to Config.appName (optional)\n * @param {string} data.url - The url for the user to verify their account.\n * @returns {string} - The rendered html of the email template\n */\nexport const renderVerifyEmailTemplate = (data: templateData) => {\n  if (!Config.appName && !data.app_name) {\n    throw new GlobalNotSetError(\"Config.appName is not yet defined\");\n  }\n\n  const url = data.url;\n  const app_name = data.app_name ?? Config.appName;\n  return renderEmailTemplate(VERIFY_EMAIL_TEMPLATE, { app_name, url });\n};\n\n/**\n * Renders the \"Reset Password\" template.\n * @param {templateData} data - The data used to render the template.\n * @param {string} [data.app_name] - The name of your app. If not provided, it defaults to Config.appName.\n * @param {string} data.url - The url for the user to reset their password.\n * @returns {string} - The rendered html of the email template.\n */\nexport const renderResetPasswordTemplate = (data: templateData) => {\n  if (!Config.appName && !data.app_name) {\n    throw new GlobalNotSetError(\"Config.appName is not yet defined\");\n  }\n\n  const url = data.url;\n  const app_name = data.app_name ?? Config.appName;\n  return renderEmailTemplate(RESET_PASSWORD_TEMPLATE, { app_name, url });\n};\n"],
  "mappings": "AAAA,SAAS,eAAe;AACxB,SAAS,+BAA+B;AACxC,SAAS,6BAA6B;AACtC,SAAS,cAAc;AACvB,SAAS,cAAc;AACvB,SAAS,yBAAyB;AAa3B,MAAM,sBAAsB,CAAC,UAAkB,SAA8B;AAClF,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,kBAAkB,2BAA2B;AAAA,EACzD;AAEA,MAAI;AACF,WAAO,OAAO,OAAO,UAAU,IAAI;AAAA,EACrC,SAAS,OAAP;AACA,YAAQ,OAAO,MAAM,EAAE,OAAO,MAAM,SAAS,GAAG,qDAAqD;AACrG,UAAM;AAAA,EACR;AACF;AASO,MAAM,4BAA4B,CAAC,SAAuB;AAC/D,MAAI,CAAC,OAAO,WAAW,CAAC,KAAK,UAAU;AACrC,UAAM,IAAI,kBAAkB,mCAAmC;AAAA,EACjE;AAEA,QAAM,MAAM,KAAK;AACjB,QAAM,WAAW,KAAK,YAAY,OAAO;AACzC,SAAO,oBAAoB,uBAAuB,EAAE,UAAU,IAAI,CAAC;AACrE;AASO,MAAM,8BAA8B,CAAC,SAAuB;AACjE,MAAI,CAAC,OAAO,WAAW,CAAC,KAAK,UAAU;AACrC,UAAM,IAAI,kBAAkB,mCAAmC;AAAA,EACjE;AAEA,QAAM,MAAM,KAAK;AACjB,QAAM,WAAW,KAAK,YAAY,OAAO;AACzC,SAAO,oBAAoB,yBAAyB,EAAE,UAAU,IAAI,CAAC;AACvE;",
  "names": []
}
