{
  "version": 3,
  "sources": ["../src/globals.ts"],
  "sourcesContent": ["import type { RequestContext } from \"@fastify/request-context\";\nimport { AsyncLocalStorage } from \"async_hooks\";\nimport type { Logger } from \"./AmbientContext\";\nimport type { AnyActionContext, AnyAmbientContext, AnyEffectContext, AnyGlobalActionContext } from \"./types\";\n\nexport const actionContextLocalStorage = new AsyncLocalStorage<AnyActionContext | AnyGlobalActionContext | AnyEffectContext>();\n\n/**\n * Extend the @fastify/request-context types with Gadget's added reference to the current unit of work's context\n * See https://github.com/fastify/fastify-request-context#typescript\n * */\ndeclare module \"@fastify/request-context\" {\n  interface RequestContextData {\n    requestContext: AnyAmbientContext | AnyActionContext | AnyGlobalActionContext | AnyEffectContext;\n  }\n}\n\nconst platformModuleRequirer = <T = any>(name: string) => {\n  let mod: T = null as any;\n  return () => {\n    if (!mod) {\n      if (!Globals.platformRequire) throw new Error(\"Globals.platformRequire is not set, has it been injected by the sandbox yet?\");\n      mod = Globals.platformRequire(name);\n    }\n    return mod;\n  };\n};\n\nexport const Globals = {\n  /**\n   * Internal variable to store the model validator function, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  modelValidator: null as any as (modelKey: string) => Promise<any>,\n\n  /**\n   * Internal variable to store the request context module, set in `set` by the `AppBridge`.\n   * @internal\n   */\n  requestContext: null as any as RequestContext,\n\n  /**\n   * @internal\n   */\n  logger: null as any as Logger,\n\n  /**\n   * Require function for importing code from the gadget platform context instead of the app's context.\n   * @internal\n   */\n  platformRequire: null as any as typeof require,\n\n  /**\n   * This is used internally to set the globals for this instance of the framework package.\n   * @internal\n   */\n  set(globals: {\n    logger: Logger;\n    modelValidator: (modelKey: string) => Promise<any>;\n    requestContext: RequestContext;\n    platformRequire: typeof require;\n  }) {\n    Object.assign(this, globals);\n  },\n\n  /**\n   * Lazy-loaded modules for use in the framework package from the gadget platform context.\n   * @internal\n   */\n  platformModules: {\n    lodash: platformModuleRequirer(\"lodash\"),\n    bcrypt: platformModuleRequirer(\"bcrypt\"),\n  },\n};\n"],
  "mappings": "AACA,SAAS,yBAAyB;AAI3B,MAAM,4BAA4B,IAAI,kBAAgF;AAY7H,MAAM,yBAAyB,CAAU,SAAiB;AACxD,MAAI,MAAS;AACb,SAAO,MAAM;AACX,QAAI,CAAC,KAAK;AACR,UAAI,CAAC,QAAQ;AAAiB,cAAM,IAAI,MAAM,8EAA8E;AAC5H,YAAM,QAAQ,gBAAgB,IAAI;AAAA,IACpC;AACA,WAAO;AAAA,EACT;AACF;AAEO,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMhB,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAKhB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMR,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjB,IAAI,SAKD;AACD,WAAO,OAAO,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AAAA,IACf,QAAQ,uBAAuB,QAAQ;AAAA,IACvC,QAAQ,uBAAuB,QAAQ;AAAA,EACzC;AACF;",
  "names": []
}
