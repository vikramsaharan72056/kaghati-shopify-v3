{"version":3,"sources":["/app/packages/framework/src/effects.ts"],"sourcesContent":["import type { RecordData } from \"@gadgetinc/api-client-core\";\nimport { ChangeTracking, GadgetRecord } from \"@gadgetinc/api-client-core\";\nimport {\n  InternalError,\n  InvalidActionInputError,\n  InvalidStateTransitionError,\n  MisconfiguredActionError,\n  NoSessionForAuthenticationError,\n  PermissionDeniedError,\n  UserNotSetOnSessionError,\n} from \"./errors\";\nimport { Globals, actionContextLocalStorage } from \"./globals\";\nimport { modelListIndex, modelsMap } from \"./metadata\";\nimport { AppTenancyKey } from \"./tenancy\";\nimport type { AnyParams, ModelMetadata, NotYetTyped } from \"./types\";\nimport { assert } from \"./utils\";\n\nfunction getBelongsToRelationParams(model: ModelMetadata, params: Record<string, any>) {\n  const belongsToParams: any = {};\n\n  for (const field of Object.values(model.fields) as any[]) {\n    if (field.fieldType != \"BelongsTo\") continue;\n    const modelParams = typeof params[model.apiIdentifier] === \"object\" ? params[model.apiIdentifier] : undefined;\n    const belongsToParam =\n      modelParams && typeof modelParams[field.apiIdentifier] === \"object\" ? modelParams[field.apiIdentifier] : undefined;\n    const belongsToId = belongsToParam?.[LINK_PARAM] !== undefined ? belongsToParam[LINK_PARAM] : belongsToParam?.id;\n    if (belongsToId !== undefined) {\n      belongsToParams[`${field.apiIdentifier}Id`] = belongsToId;\n    }\n  }\n\n  return belongsToParams;\n}\n\nexport function createGadgetRecord<Shape>(apiIdentifier: string, data: Shape): GadgetRecord<Shape & { __typename: string }> {\n  const model = getModelByApiIdentifier(apiIdentifier);\n  return new GadgetRecord({\n    ...data,\n    __typename: model.graphqlTypeName,\n  });\n}\n\n/**\n * Set incoming parameters onto a `record` object.\n *\n * @param params - Parameters for setting, usually from an action context or a  to set on the record\n * @param record - Record to apply parameters to\n */\nexport function applyParams(params: AnyParams, record: GadgetRecord<any>) {\n  const model = getModelByTypename(record.__typename);\n\n  // override the record with any new params, including relationId params from any _link params on belongs to relationships\n  // Change the code snippet in `ApplyParamsDetailsPanel.tsx` when the code below updates\n  Object.assign(record, params[model.apiIdentifier], getBelongsToRelationParams(model, params));\n}\n\n/**\n * Validates the given record, then creates or updates the record in the database.\n *\n * If any validation errors are encountered, they'll be thrown as a GadgetValidationError.\n *\n * Uses the Internal API for your application to persist data.\n *\n * The record param must have a `__typename` parameter.\n *\n * @param record - Record to save to the database\n */\nexport async function save(record: GadgetRecord<any>) {\n  const context = maybeGetActionContextFromLocalStorage();\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n  const model = getModelByTypename(record.__typename);\n\n  await (await Globals.modelValidator(model.key)).validate({ api, logger: Globals.logger }, record);\n\n  if (!api.internal[model.apiIdentifier]) {\n    throw new InternalError(\n      `Gadget API client doesn't have an internal model manager for ${model.apiIdentifier} to run a Save Record function -- has it finished regenerating or was it recently removed?`\n    );\n  }\n\n  let result: GadgetRecord<any>;\n\n  if (\"createdAt\" in record && record.createdAt) {\n    result = await api.internal[model.apiIdentifier].update(record.id, {\n      [model.apiIdentifier]: changedAttributes(model, record),\n    });\n  } else {\n    result = await api.internal[model.apiIdentifier].create({\n      [model.apiIdentifier]: writableAttributes(model, record),\n    });\n  }\n\n  Object.assign(record, { ...result });\n  record.flushChanges(ChangeTracking.SinceLastPersisted);\n}\n\n/**\n * Deletes the given record from your database.\n *\n * @param record - Record to delete from the database\n */\nexport async function deleteRecord(record: GadgetRecord<any>) {\n  const context = maybeGetActionContextFromLocalStorage();\n\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n  const scope = context ? context.scope : {};\n  const model = getModelByTypename(record.__typename);\n\n  const id = assert(record.id, `record.id not set on record in scope, has the record been persisted?`);\n\n  if (!api.internal[model.apiIdentifier]) {\n    throw new InternalError(\n      `Gadget API client doesn't have an internal model manager for ${model.apiIdentifier} to run a Delete Record effect -- has it finished regenerating or was it recently removed?`\n    );\n  }\n\n  await api.internal[model.apiIdentifier].delete(id);\n  scope.recordDeleted = true;\n}\n\nexport const ShopifyShopState = {\n  Installed: { created: \"installed\" },\n  Uninstalled: { created: \"uninstalled\" },\n};\n\nexport const ShopifySyncState = {\n  Created: \"created\",\n  Running: \"running\",\n  Completed: \"completed\",\n  Errored: \"errored\",\n};\n\nexport const ShopifyBulkOperationState = {\n  Created: \"created\",\n  Completed: \"completed\",\n  Canceled: \"canceled\",\n  Failed: \"failed\",\n  Expired: \"expired\",\n};\n\nexport const ShopifySellingPlanGroupProductVariantState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\nexport const ShopifySellingPlanGroupProductState = {\n  Started: \"started\",\n  Created: \"created\",\n  Deleted: \"deleted\",\n};\n\nexport function transitionState(\n  record: GadgetRecord<any>,\n  transition: {\n    from?: string | Record<string, string>;\n    to: string | Record<string, string>;\n  }\n) {\n  const stringRecordState = typeof record.state === \"string\" ? record.state : JSON.stringify(record.state);\n  const stringTransitionFrom = typeof transition.from === \"string\" ? transition.from : JSON.stringify(transition.from);\n\n  if (transition.from && stringRecordState !== stringTransitionFrom) {\n    throw new InvalidStateTransitionError(undefined, {\n      state: record.state,\n      expectedFrom: transition.from,\n    });\n  }\n\n  record.state = transition.to;\n}\n\nexport async function shopifySync(params: AnyParams, record: GadgetRecord<any>) {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { syncSince?: Date; id: bigint; shopId: string; models: any; force: boolean } = assert(\n    record,\n    \"cannot start a shop sync from this action\"\n  );\n\n  const shopId = assert(syncRecord.shopId, \"a shop is required to start a sync\");\n\n  // verify that models is an array of strings if defined\n\n  if (!syncRecord.models || (Array.isArray(syncRecord.models) && syncRecord.models.every((m) => typeof m == \"string\"))) {\n    try {\n      await effectAPIs.sync(\n        syncRecord.id.toString(),\n        shopId,\n        syncRecord.syncSince,\n        syncRecord.models,\n        syncRecord.force,\n        params.startReason\n      );\n    } catch (error) {\n      Globals.logger.error({ error, connectionSyncId: syncRecord.id }, \"an error occurred starting shop sync\");\n      throw error;\n    }\n  } else {\n    throw new InvalidActionInputError(\"Models must be an array of api identifiers\");\n  }\n}\n\nexport async function abortSync(params: AnyParams, record: GadgetRecord<any>) {\n  const context = getActionContextFromLocalStorage();\n  const effectAPIs = context.effectAPIs;\n\n  const syncRecord: { id: bigint } = assert(record, \"a record is required to abort a shop sync\");\n\n  const syncId = assert(syncRecord.id, \"a sync id is required to start a sync\");\n\n  if (!params.errorMessage) {\n    record.errorMessage = \"Sync aborted\";\n  }\n\n  Globals.logger.info({ userVisible: true, connectionSyncId: syncId }, \"aborting sync\");\n\n  try {\n    await effectAPIs.abortSync(syncId.toString());\n  } catch (error) {\n    Globals.logger.error({ error, connectionSyncId: syncId }, \"an error occurred aborting sync\");\n    throw error;\n  }\n}\n\n/**\n * Enforce that the given record is only accessible by the current shop. For multi-tenant Shopify applications, this is key for enforcing data can only be accessed by the shop that owns it.\n *\n * For existing records, this function verifies the record object has the same `shopId` as the shop in the current session, and throws if not\n * For new records, this function sets the record's `shopId` to the current session's `shopId`.\n *\n * The `shopBelongsToField` option is a required parameter if the model has more than one related shop field to specify which field to use.\n *\n * @param params - Incoming parameters, validated against the current `shopId`\n * @param record - Record to validate or set the `shopId` on\n * @param options - Options for the function\n */\nexport async function preventCrossShopDataAccess(params: AnyParams, record: GadgetRecord<any>, options?: { shopBelongsToField: string }) {\n  const context = getActionContextFromLocalStorage();\n  if (context.type != \"effect\") {\n    throw new Error(\"Can't prevent cross shop data access outside of an action effect\");\n  }\n  if (!params) {\n    throw new Error(\n      \"The `params` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  if (!record) {\n    throw new Error(\n      \"The `record` parameter is required in preventCrossShopDataAccess(params, record, options?: { shopBelongsToField: string })\"\n    );\n  }\n  const model = context.model;\n  const appTenancy = context[AppTenancyKey];\n  const shopBelongsToField = options?.shopBelongsToField;\n\n  // if there's no tenancy let's continue\n  if (appTenancy?.shopify?.shopId === undefined) {\n    return;\n  }\n\n  // if this effect is not run in the context of a model then it does not apply\n  if (!model) {\n    return;\n  }\n\n  const shopId = String(appTenancy.shopify.shopId);\n\n  // If this effect is being added to the Shopify Shop model, simply compare the record's ID\n  if (model.key == ShopifyShopKey) {\n    if (record && String(record.id) !== shopId) {\n      throw new PermissionDeniedError();\n    }\n    return;\n  }\n\n  const fieldsIsBelongsToShopifyShop = Object.values(model.fields).filter(\n    (f) => f.fieldType === (FieldType.BelongsTo as string) && f.configuration.relatedModelKey === ShopifyShopKey\n  );\n\n  if (fieldsIsBelongsToShopifyShop.length === 0) {\n    throw new MisconfiguredActionError(\"This model is missing a related shop field.\");\n  }\n\n  if (fieldsIsBelongsToShopifyShop.length > 1 && !shopBelongsToField) {\n    throw new MisconfiguredActionError(\n      \"This function is missing a related shop field option. `shopBelongsToField` is a required option parameter if the model has more than one related shop field.\"\n    );\n  }\n\n  let relatedField = fieldsIsBelongsToShopifyShop[0];\n\n  if (shopBelongsToField) {\n    const selectedField = Object.values(model.fields).find((f) => f.apiIdentifier === shopBelongsToField);\n    if (!selectedField) {\n      throw new MisconfiguredActionError(\"The selected shop relation field does not exist.\");\n    }\n\n    if (selectedField.fieldType !== (FieldType.BelongsTo as string) || selectedField.configuration.relatedModelKey !== ShopifyShopKey) {\n      throw new MisconfiguredActionError(\n        \"The selected shop relation field should be a `Belongs To` relationship to the `Shopify Shop` model.\"\n      );\n    } else {\n      relatedField = selectedField;\n    }\n  }\n\n  const input = params[model.apiIdentifier];\n\n  // if we're trying to set the params to a shop other than the tenant we should reject\n  if (Globals.platformModules.lodash().isObjectLike(input)) {\n    const objectInput = input as Record<string, any>;\n    if (objectInput[relatedField.apiIdentifier]) {\n      if (String(objectInput[relatedField.apiIdentifier][LINK_PARAM]) !== shopId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      objectInput[relatedField.apiIdentifier] = {\n        [LINK_PARAM]: shopId,\n      };\n    }\n  } else {\n    params[model.apiIdentifier] = {\n      [relatedField.apiIdentifier]: {\n        [LINK_PARAM]: shopId,\n      },\n    };\n  }\n\n  if (record) {\n    const value = record.getField(relatedField.apiIdentifier);\n\n    // if the record doesn't have a shop set then anyone can update it\n    if (value) {\n      const recordShopId = typeof value === \"object\" ? value[LINK_PARAM] : value;\n      if (String(recordShopId) !== shopId) {\n        throw new PermissionDeniedError();\n      }\n    } else {\n      // we have to re-apply the params to the record to ensure that this effect still works correctly if it occurs after \"apply params\"\n      record.setField(relatedField.apiIdentifier, {\n        [LINK_PARAM]: shopId,\n      });\n    }\n  }\n}\n\nexport async function finishBulkOperation(record: GadgetRecord<any>) {\n  if (!record?.id) {\n    Globals.logger.warn(`Expected bulk operation record to be present for action`);\n    return;\n  }\n\n  const context = getActionContextFromLocalStorage();\n  const shopifyAPI = await (context.connections as Record<string, any>).shopify.forShopId(record.shopId);\n  if (!shopifyAPI) {\n    Globals.logger.error(`Could not instantiate Shopify client for shop ID ${record.shopId}`);\n    return;\n  }\n  const bulkOperation = (\n    await shopifyAPI.graphql(`query {\n        node(id: \"${ShopifyBulkOperationGIDForId(record.id)}\") {\n          ... on BulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            type\n            partialDataUrl\n            rootObjectCount\n          }\n        }\n      }`)\n  ).node;\n\n  // normalize the mixed upper/lowercase (GraphQL/REST) to lowercase\n  const { status, errorCode, type } = bulkOperation;\n  Object.assign(record, {\n    ...bulkOperation,\n    status: status?.toLowerCase(),\n    errorCode: errorCode?.toLowerCase(),\n    type: type?.toLowerCase(),\n    id: record.id,\n  });\n}\n\nexport async function globalShopifySync(params: {\n  apiKeys: string[];\n  syncSince: string;\n  models: string[];\n  force: boolean;\n  startReason: string;\n}) {\n  const context = maybeGetActionContextFromLocalStorage();\n  const effectAPIs = assert(\n    context ? context.effectAPIs : getCurrentContext().effectAPIs,\n    \"effect apis is missing from the current context\"\n  );\n  const api = assert(context ? context.api : getCurrentContext().api, \"api client is missing from the current context\");\n\n  const { apiKeys, syncSince, models, force, startReason } = params;\n\n  const { shopModelIdentifier, installedViaKeyFieldIdentifier, runShopSyncIdentifier, accessTokenIdentifier, forceFieldIdentifier } =\n    await effectAPIs.getSyncIdentifiers();\n\n  const pageSize = 250;\n  let pageInfo: { first?: number; endCursor?: string; hasNextPage: boolean } = { first: pageSize, hasNextPage: true };\n  const results: { id: string; domain: string; state: Record<string, any>; [key: string]: any }[] = [];\n\n  if (apiKeys && apiKeys.length > 0) {\n    try {\n      while (pageInfo.hasNextPage) {\n        const records = await api.internal[shopModelIdentifier].findMany({\n          filter: {\n            [installedViaKeyFieldIdentifier]: {\n              in: apiKeys,\n            },\n            state: {\n              inState: \"created.installed\",\n            },\n            planName: {\n              notIn: [\"frozen\", \"fraudulent\", \"cancelled\"],\n            },\n          },\n          first: pageInfo.first,\n          after: pageInfo.endCursor,\n        });\n        results.push(...records);\n        pageInfo = records.pagination.pageInfo;\n      }\n    } catch (error) {\n      Globals.logger.info({ userVisible: true, error, apiKeys }, \"could not get shops for all API keys\");\n      throw error;\n    }\n\n    for (const result of results) {\n      // skip the sync if there is no accessToken set or if the state is uninstalled\n      if (Globals.platformModules.lodash().isEmpty(result[accessTokenIdentifier]) || result.state?.created == \"uninstalled\") {\n        Globals.logger.info({ shopId: result.id }, \"skipping sync for shop without access token or is uninstalled\");\n        continue;\n      }\n\n      try {\n        const response = await api.mutate(\n          `\n            mutation runSync($shopId: GadgetID!, $domain: String!, $syncSince: DateTime, $models: JSON${\n              forceFieldIdentifier ? \", $force: Boolean\" : \"\"\n            }, $startReason: String) {\n              ${runShopSyncIdentifier}(shopifySync:{\n                domain:$domain\n                syncSince:$syncSince\n                models:$models\n                ${forceFieldIdentifier ? `${forceFieldIdentifier}:$force` : \"\"}\n                shop:{\n                  _link:$shopId\n                }\n              }, startReason: $startReason) {\n                success\n                errors {\n                  message\n                }\n              }\n            }\n          `,\n          {\n            shopId: result.id,\n            domain: result.domain,\n            syncSince,\n            models,\n            ...(forceFieldIdentifier ? { force } : undefined),\n            startReason,\n          }\n        );\n\n        // we might have some errors such as the desired models not being enabled for the connection\n        if (response[runShopSyncIdentifier] && !response[runShopSyncIdentifier].success) {\n          Globals.logger.warn(\n            { userVisible: true, shop: result, error: response[runShopSyncIdentifier].errors },\n            \"couldn't start sync for shop\"\n          );\n        }\n      } catch (error) {\n        // log that the sync could not be started for the shop but continue\n        Globals.logger.warn({ userVisible: true, error, shop: result }, \"couldn't start sync for shop\");\n      }\n    }\n  } else {\n    throw new InvalidActionInputError(\"missing at least 1 api key\");\n  }\n}\n\nexport function legacySetUser() {\n  const context = getActionContextFromLocalStorage();\n\n  if (!context.scope.authenticatedUser) {\n    throw new UserNotSetOnSessionError(\n      \"The authenticated user could not be saved to the session when logging in. Make sure the user has a role assigned to them.\"\n    );\n  }\n  if (!context.session) {\n    throw new NoSessionForAuthenticationError(\n      \"Unable to authenticate because the request was made with no session in context to transition.\"\n    );\n  }\n  context.session.set(\"user\", { [LINK_PARAM]: context.scope.authenticatedUser.id });\n}\n\nexport function legacyUnsetUser() {\n  const context = getActionContextFromLocalStorage();\n\n  if (!context.session) {\n    throw new NoSessionForAuthenticationError(\"Unable to unset users on session because the request was made with no session.\");\n  }\n  context.session.delete(\"user\");\n}\n\nexport async function legacySuccessfulAuthentication(params: AnyParams) {\n  const context = getActionContextFromLocalStorage();\n  const { api, scope } = context;\n\n  const user = (await api.internal.user.findMany({ filter: { email: { equals: params.email } } }))[0];\n  let result = false;\n  if (user && params.password && user.password?.hash) {\n    if (await Globals.platformModules.bcrypt().compare(params.password, user.password.hash)) {\n      scope.authenticatedUser = user;\n      result = true;\n    }\n  }\n  Globals.logger.info({ email: params.email, userId: user?.id, result }, \"login attempt\");\n\n  if (!result) {\n    throw new Error(\"Invalid email or password\");\n  }\n}\n\n/**\n * Internal helper functions and variables\n */\n\n/**\n * Get action context without `params` and `record` from async local storage.\n */\nfunction getActionContextFromLocalStorage() {\n  return assert(actionContextLocalStorage.getStore(), \"this effect function should only be called from within an action\");\n}\n\n/**\n * Similar to `getActionContextFromLocalStorage` but returns `undefined` if there is no action context. (i.e. possibly called from a route)\n */\nfunction maybeGetActionContextFromLocalStorage() {\n  return actionContextLocalStorage.getStore();\n}\n\nfunction getCurrentContext() {\n  return assert(Globals.requestContext.get(\"requestContext\"), \"no gadget context found on request\");\n}\n\nconst LINK_PARAM = \"_link\";\n\nfunction writableAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>) {\n  const fieldsByApiIdentifier = Globals.platformModules.lodash().keyBy(Object.values(model.fields) as NotYetTyped[], \"apiIdentifier\");\n  return Globals.platformModules.lodash().pickBy(record, (v: any, k: any) => fieldsByApiIdentifier[k]?.internalWritable);\n}\n\nfunction changedAttributes(model: ModelMetadata, record: GadgetRecord<RecordData>) {\n  const changes = record.changes();\n  const attributes = Object.keys(changes).reduce((attrs, key) => {\n    attrs[key] = record[key];\n    return attrs;\n  }, {} as any);\n  return writableAttributes(model, attributes);\n}\n\nconst getModelByApiIdentifier = (apiIdentifier: string): ModelMetadata => {\n  const typename = modelListIndex[`api:${apiIdentifier}`];\n  if (!typename) {\n    throw new InternalError(`Model ${apiIdentifier} not found in available model metadata`, {\n      availableApiIdentifiers: Object.keys(modelListIndex),\n    });\n  }\n\n  return getModelByTypename(typename);\n};\n\nconst getModelByTypename = (typename: string): ModelMetadata => {\n  if (!typename) {\n    throw new InternalError(`No typename found on record, __typename must be set for accessing model metadata`);\n  }\n\n  const model = modelsMap[typename];\n  if (!model) {\n    throw new InternalError(`Model with typename ${typename} not found in available model metadata`, {\n      availableTypenames: Object.keys(modelsMap),\n    });\n  }\n\n  return model;\n};\n\nexport enum FieldType {\n  ID = \"ID\",\n  Number = \"Number\",\n  String = \"String\",\n  Enum = \"Enum\",\n  RichText = \"RichText\",\n  DateTime = \"DateTime\",\n  Email = \"Email\",\n  URL = \"URL\",\n  Money = \"Money\",\n  File = \"File\",\n  Color = \"Color\",\n  Password = \"Password\",\n  Computed = \"Computed\",\n  HasManyThrough = \"HasManyThrough\",\n  BelongsTo = \"BelongsTo\",\n  HasMany = \"HasMany\",\n  HasOne = \"HasOne\",\n  Boolean = \"Boolean\",\n  Model = \"Model\",\n  Object = \"Object\",\n  Array = \"Array\",\n  JSON = \"JSON\",\n  Code = \"Code\",\n  EncryptedString = \"EncryptedString\",\n  Vector = \"Vector\",\n  /**\n   * Any value at all.\n   * Prefer FieldType.JSON where possible, it's more descriptive.\n   */\n  Any = \"Any\",\n  Null = \"Null\",\n  RecordState = \"RecordState\",\n  RoleAssignments = \"RoleAssignments\",\n}\n\nconst shopifyModelKey = (modelName: string) => {\n  const modelKey = modelName.replaceAll(\" \", \"\");\n  return `DataModel-Shopify-${modelKey}`;\n};\n\nconst ShopifyShopKey = shopifyModelKey(\"Shop\");\n\nconst ShopifyBulkOperationGIDForId = (id: string) => `gid://shopify/BulkOperation/${id}`;\n"],"names":["ShopifyBulkOperationState","ShopifySellingPlanGroupProductState","ShopifySellingPlanGroupProductVariantState","ShopifyShopState","ShopifySyncState","abortSync","applyParams","createGadgetRecord","deleteRecord","finishBulkOperation","globalShopifySync","legacySetUser","legacySuccessfulAuthentication","legacyUnsetUser","preventCrossShopDataAccess","save","shopifySync","transitionState","getBelongsToRelationParams","model","params","belongsToParams","field","Object","values","fields","fieldType","modelParams","apiIdentifier","undefined","belongsToParam","belongsToId","LINK_PARAM","id","data","getModelByApiIdentifier","GadgetRecord","__typename","graphqlTypeName","record","getModelByTypename","assign","context","maybeGetActionContextFromLocalStorage","api","assert","getCurrentContext","Globals","modelValidator","key","validate","logger","internal","InternalError","result","createdAt","update","changedAttributes","create","writableAttributes","flushChanges","ChangeTracking","SinceLastPersisted","scope","delete","recordDeleted","Installed","created","Uninstalled","Created","Running","Completed","Errored","Canceled","Failed","Expired","Started","Deleted","transition","stringRecordState","state","JSON","stringify","stringTransitionFrom","from","InvalidStateTransitionError","expectedFrom","to","getActionContextFromLocalStorage","effectAPIs","syncRecord","shopId","models","Array","isArray","every","m","sync","toString","syncSince","force","startReason","error","connectionSyncId","InvalidActionInputError","syncId","errorMessage","info","userVisible","options","type","Error","appTenancy","AppTenancyKey","shopBelongsToField","shopify","String","ShopifyShopKey","PermissionDeniedError","fieldsIsBelongsToShopifyShop","filter","f","configuration","relatedModelKey","length","MisconfiguredActionError","relatedField","selectedField","find","input","platformModules","lodash","isObjectLike","objectInput","value","getField","recordShopId","setField","warn","shopifyAPI","connections","forShopId","bulkOperation","graphql","ShopifyBulkOperationGIDForId","node","status","errorCode","toLowerCase","apiKeys","shopModelIdentifier","installedViaKeyFieldIdentifier","runShopSyncIdentifier","accessTokenIdentifier","forceFieldIdentifier","getSyncIdentifiers","pageSize","pageInfo","first","hasNextPage","results","records","findMany","in","inState","planName","notIn","after","endCursor","push","pagination","isEmpty","response","mutate","domain","success","shop","errors","authenticatedUser","UserNotSetOnSessionError","session","NoSessionForAuthenticationError","set","user","email","equals","password","hash","bcrypt","compare","userId","actionContextLocalStorage","getStore","requestContext","get","fieldsByApiIdentifier","keyBy","pickBy","v","k","internalWritable","changes","attributes","keys","reduce","attrs","typename","modelListIndex","availableApiIdentifiers","modelsMap","availableTypenames","FieldType","shopifyModelKey","modelName","modelKey","replaceAll"],"mappings":"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"}