{
  "version": 3,
  "sources": ["../../src/models/ShopifyDraftOrderLineItem.ts"],
  "sourcesContent": ["import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n  DeepFilterNever,\n  IDsList,\n      ShopifyDraftOrderLineItem,\n      ShopifyDraftOrderLineItemSort,\n      ShopifyDraftOrderLineItemFilter,\n      AvailableShopifyDraftOrderLineItemSelection,\n  \n} from \"../types.js\";\n\nimport { disambiguateActionParams } from \"../support.js\";\n\nexport const DefaultShopifyDraftOrderLineItemSelection = {\n  \"__typename\": true,\n  \"appliedDiscount\": true,\n  \"createdAt\": true,\n  \"fulfillmentService\": true,\n  \"giftCard\": true,\n  \"grams\": true,\n  \"id\": true,\n  \"name\": true,\n  \"price\": true,\n  \"properties\": true,\n  \"quantity\": true,\n  \"requiresShipping\": true,\n  \"sku\": true,\n  \"taxLines\": true,\n  \"taxable\": true,\n  \"title\": true,\n  \"updatedAt\": true,\n  \"variantTitle\": true,\n  \"vendor\": true\n} as const;\n\n/**\n* Produce a type that holds only the selected fields (and nested fields) of \"shopifyDraftOrderLineItem\". The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyDraftOrderLineItemOrDefault<Options extends Selectable<AvailableShopifyDraftOrderLineItemSelection>> = DeepFilterNever<\n  Select<\n    ShopifyDraftOrderLineItem,\n    DefaultSelection<\n      AvailableShopifyDraftOrderLineItemSelection,\n      Options,\n      typeof DefaultShopifyDraftOrderLineItemSelection\n    >\n  >>;\n\n/** Options that can be passed to the `ShopifyDraftOrderLineItemManager#findOne` method */\nexport interface FindOneShopifyDraftOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDraftOrderLineItemSelection;\n};\n\n/** Options that can be passed to the `ShopifyDraftOrderLineItemManager#maybeFindOne` method */\nexport interface MaybeFindOneShopifyDraftOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDraftOrderLineItemSelection;\n};\n\n/** Options that can be passed to the `ShopifyDraftOrderLineItemManager#findMany` method */\nexport interface FindManyShopifyDraftOrderLineItemsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDraftOrderLineItemSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyDraftOrderLineItemSort | ShopifyDraftOrderLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyDraftOrderLineItemFilter | ShopifyDraftOrderLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyDraftOrderLineItemManager#findFirst` method */\nexport interface FindFirstShopifyDraftOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDraftOrderLineItemSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyDraftOrderLineItemSort | ShopifyDraftOrderLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyDraftOrderLineItemFilter | ShopifyDraftOrderLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyDraftOrderLineItemManager#maybeFindFirst` method */\nexport interface MaybeFindFirstShopifyDraftOrderLineItemOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDraftOrderLineItemSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyDraftOrderLineItemSort | ShopifyDraftOrderLineItemSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyDraftOrderLineItemFilter | ShopifyDraftOrderLineItemFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\nconst apiIdentifier = \"shopifyDraftOrderLineItem\";\nconst pluralApiIdentifier = \"shopifyDraftOrderLineItems\";\n\n\n\n\n\n/** All the actions available at the collection level and record level for \"shopifyDraftOrderLineItem\" */\nexport class ShopifyDraftOrderLineItemManager {\n  constructor(readonly connection: GadgetConnection) {}\n\n  \n    /**\n * Finds one shopifyDraftOrderLineItem by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nfindOne: {\n  <Options extends FindOneShopifyDraftOrderLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyDraftOrderLineItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      >\n    >;\n  type: \"findOne\",\n  findByVariableName: \"id\";\n  operationName: \"shopifyDraftOrderLineItem\";\n  modelApiIdentifier: \"shopifyDraftOrderLineItem\";\n  defaultSelection: typeof DefaultShopifyDraftOrderLineItemSelection;\n  selectionType: AvailableShopifyDraftOrderLineItemSelection;\n  optionsType: FindOneShopifyDraftOrderLineItemOptions;\n  schemaType: Query[\"shopifyDraftOrderLineItem\"];\n} = Object.assign(\n  async <Options extends FindOneShopifyDraftOrderLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyDraftOrderLineItemOptions>) => {\n    return await findOneRunner<SelectedShopifyDraftOrderLineItemOrDefault<Options>>(\n      this,\n      \"shopifyDraftOrderLineItem\",\n      id,\n      DefaultShopifyDraftOrderLineItemSelection,\n      apiIdentifier,\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyDraftOrderLineItem\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDraftOrderLineItemSelection,\n  } as any\n)\n\n  \n    /**\n * Finds one shopifyDraftOrderLineItem by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nmaybeFindOne: {\n  <Options extends MaybeFindOneShopifyDraftOrderLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyDraftOrderLineItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n  operationName: \"shopifyDraftOrderLineItem\";\n  modelApiIdentifier: \"shopifyDraftOrderLineItem\";\n  defaultSelection: typeof DefaultShopifyDraftOrderLineItemSelection;\n  selectionType: AvailableShopifyDraftOrderLineItemSelection;\n  optionsType: MaybeFindOneShopifyDraftOrderLineItemOptions;\n  schemaType: Query[\"shopifyDraftOrderLineItem\"];\n} = Object.assign(\n  async <Options extends MaybeFindOneShopifyDraftOrderLineItemOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyDraftOrderLineItemOptions>) => {\n    const record = await findOneRunner<SelectedShopifyDraftOrderLineItemOrDefault<Options>>(\n      this,\n      \"shopifyDraftOrderLineItem\",\n      id,\n      DefaultShopifyDraftOrderLineItemSelection,\n      apiIdentifier,\n      options,\n      false\n    );\n    return record.isEmpty() ? null : record;\n  },\n  {\n    type: \"maybeFindOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyDraftOrderLineItem\",\n    modelApiIdentifier: \"shopifyDraftOrderLineItem\",\n    defaultSelection: DefaultShopifyDraftOrderLineItemSelection,\n  } as any\n)\n\n  \n    /**\n * Finds many shopifyDraftOrderLineItem. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindMany: {\n  <Options extends FindManyShopifyDraftOrderLineItemsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyDraftOrderLineItemsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      >\n    >;\n  type: \"findMany\";\n  operationName: \"shopifyDraftOrderLineItems\";\n  modelApiIdentifier: \"shopifyDraftOrderLineItem\";\n  defaultSelection: typeof DefaultShopifyDraftOrderLineItemSelection;\n  selectionType: AvailableShopifyDraftOrderLineItemSelection;\n  optionsType: FindManyShopifyDraftOrderLineItemsOptions;\n  schemaType: Query[\"shopifyDraftOrderLineItem\"];\n} = Object.assign(\n  async <Options extends FindManyShopifyDraftOrderLineItemsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyDraftOrderLineItemsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      >\n    > =>\n  {\n    return await findManyRunner<SelectedShopifyDraftOrderLineItemOrDefault<Options>>(\n      this,\n      \"shopifyDraftOrderLineItems\",\n      DefaultShopifyDraftOrderLineItemSelection,\n      \"shopifyDraftOrderLineItem\",\n      options\n    );\n  },\n  {\n    type: \"findMany\",\n    operationName: \"shopifyDraftOrderLineItems\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDraftOrderLineItemSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyDraftOrderLineItem. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindFirst: {\n  <Options extends FindFirstShopifyDraftOrderLineItemOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyDraftOrderLineItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      >\n    >;\n  type: \"findFirst\";\n  operationName: \"shopifyDraftOrderLineItems\";\n  modelApiIdentifier: \"shopifyDraftOrderLineItem\";\n  defaultSelection: typeof DefaultShopifyDraftOrderLineItemSelection;\n  selectionType: AvailableShopifyDraftOrderLineItemSelection;\n  optionsType: FindFirstShopifyDraftOrderLineItemOptions;\n  schemaType: Query[\"shopifyDraftOrderLineItem\"];\n} = Object.assign(\n  async <Options extends FindFirstShopifyDraftOrderLineItemOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyDraftOrderLineItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      >\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyDraftOrderLineItemOrDefault<Options>>(\n      this,\n      \"shopifyDraftOrderLineItems\",\n      DefaultShopifyDraftOrderLineItemSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      true\n    );\n    return list[0];\n  },\n  {\n    type: \"findFirst\",\n    operationName: \"shopifyDraftOrderLineItems\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDraftOrderLineItemSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyDraftOrderLineItem. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n **/\nmaybeFindFirst: {\n  <Options extends MaybeFindFirstShopifyDraftOrderLineItemOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyDraftOrderLineItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindFirst\";\n  operationName: \"shopifyDraftOrderLineItems\";\n  modelApiIdentifier: \"shopifyDraftOrderLineItem\";\n  defaultSelection: typeof DefaultShopifyDraftOrderLineItemSelection;\n  selectionType: AvailableShopifyDraftOrderLineItemSelection;\n  optionsType: MaybeFindFirstShopifyDraftOrderLineItemOptions;\n  schemaType: Query[\"shopifyDraftOrderLineItem\"];\n} = Object.assign(\n  async <Options extends MaybeFindFirstShopifyDraftOrderLineItemOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyDraftOrderLineItemOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDraftOrderLineItemOrDefault<Options>\n      > | null\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyDraftOrderLineItemOrDefault<Options>>(\n      this,\n      \"shopifyDraftOrderLineItems\",\n      DefaultShopifyDraftOrderLineItemSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      false\n    );\n    return list?.[0] ?? null;\n  },\n  {\n    type: \"maybeFindFirst\",\n    operationName: \"shopifyDraftOrderLineItems\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDraftOrderLineItemSelection,\n  } as any\n);\n\n  \n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAaO;AAiBA,MAAM,4CAA4C;AAAA,EACvD,cAAc;AAAA,EACd,mBAAmB;AAAA,EACnB,aAAa;AAAA,EACb,sBAAsB;AAAA,EACtB,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,oBAAoB;AAAA,EACpB,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,SAAS;AAAA,EACT,aAAa;AAAA,EACb,gBAAgB;AAAA,EAChB,UAAU;AACZ;AAoBC;AAMA;AAgBA;AAYA;AAYA;AAGD,MAAM,gBAAgB;AACtB,MAAM,sBAAsB;AAOrB,MAAM,iCAAiC;AAAA,EAC5C,YAAqB,YAA8B;AAA9B;AAMvB;AAAA;AAAA;AAAA,mBAeI,OAAO;AAAA,MACT,OAAgE,IAAY,YAAiF;AAC3J,eAAO,UAAM;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,wBAeI,OAAO;AAAA,MACT,OAAqE,IAAY,YAAsF;AACrK,cAAM,SAAS,UAAM;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,OAAO,QAAQ,IAAI,OAAO;AAAA,MACnC;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,oBAAoB;AAAA,QACpB,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,oBAcI,OAAO;AAAA,MACT,OAAkE,YAMlE;AACE,eAAO,UAAM;AAAA,UACX;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,qBAcI,OAAO;AAAA,MACT,OAAkE,YAMlE;AACE,cAAM,OAAO,UAAM;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,EAAE,GAAG,SAAS,OAAO,GAAG,MAAM,QAAW,QAAQ,QAAW,OAAO,OAAU;AAAA,UAC7E;AAAA,QACF;AACA,eAAO,KAAK,CAAC;AAAA,MACf;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAMA;AAAA;AAAA;AAAA,0BAcI,OAAO;AAAA,MACT,OAAuE,YAMvE;AACE,cAAM,OAAO,UAAM;AAAA,UACjB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,EAAE,GAAG,SAAS,OAAO,GAAG,MAAM,QAAW,QAAQ,QAAW,OAAO,OAAU;AAAA,UAC7E;AAAA,QACF;AACA,gBAAO,6BAAO,OAAM;AAAA,MACtB;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,eAAe;AAAA,QACf,oBAAoB;AAAA,QACpB,kBAAkB;AAAA,MACpB;AAAA,IACF;AAAA,EAlNsD;AAqNtD;",
  "names": []
}
